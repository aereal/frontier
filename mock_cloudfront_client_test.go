// Code generated by MockGen. DO NOT EDIT.

package frontier_test

import (
	context "context"
	reflect "reflect"

	cloudfront "github.com/aws/aws-sdk-go-v2/service/cloudfront"
	gomock "go.uber.org/mock/gomock"
)

// MockCloudFrontClient is a mock of CloudFrontClient interface.
type MockCloudFrontClient struct {
	ctrl     *gomock.Controller
	recorder *MockCloudFrontClientMockRecorder
	isgomock struct{}
}

// MockCloudFrontClientMockRecorder is the mock recorder for MockCloudFrontClient.
type MockCloudFrontClientMockRecorder struct {
	mock *MockCloudFrontClient
}

// NewMockCloudFrontClient creates a new mock instance.
func NewMockCloudFrontClient(ctrl *gomock.Controller) *MockCloudFrontClient {
	mock := &MockCloudFrontClient{ctrl: ctrl}
	mock.recorder = &MockCloudFrontClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudFrontClient) EXPECT() *MockCloudFrontClientMockRecorder {
	return m.recorder
}

// CreateFunction mocks base method.
func (m *MockCloudFrontClient) CreateFunction(ctx context.Context, params *cloudfront.CreateFunctionInput, optFns ...func(*cloudfront.Options)) (*cloudfront.CreateFunctionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFunction", varargs...)
	ret0, _ := ret[0].(*cloudfront.CreateFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFunction indicates an expected call of CreateFunction.
func (mr *MockCloudFrontClientMockRecorder) CreateFunction(ctx, params any, optFns ...any) *MockCloudFrontClientCreateFunctionCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFunction", reflect.TypeOf((*MockCloudFrontClient)(nil).CreateFunction), varargs...)
	return &MockCloudFrontClientCreateFunctionCall{Call: call}
}

// MockCloudFrontClientCreateFunctionCall wrap *gomock.Call
type MockCloudFrontClientCreateFunctionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudFrontClientCreateFunctionCall) Return(arg0 *cloudfront.CreateFunctionOutput, arg1 error) *MockCloudFrontClientCreateFunctionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudFrontClientCreateFunctionCall) Do(f func(context.Context, *cloudfront.CreateFunctionInput, ...func(*cloudfront.Options)) (*cloudfront.CreateFunctionOutput, error)) *MockCloudFrontClientCreateFunctionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudFrontClientCreateFunctionCall) DoAndReturn(f func(context.Context, *cloudfront.CreateFunctionInput, ...func(*cloudfront.Options)) (*cloudfront.CreateFunctionOutput, error)) *MockCloudFrontClientCreateFunctionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFunction mocks base method.
func (m *MockCloudFrontClient) GetFunction(ctx context.Context, params *cloudfront.GetFunctionInput, optFns ...func(*cloudfront.Options)) (*cloudfront.GetFunctionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFunction", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFunction indicates an expected call of GetFunction.
func (mr *MockCloudFrontClientMockRecorder) GetFunction(ctx, params any, optFns ...any) *MockCloudFrontClientGetFunctionCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFunction", reflect.TypeOf((*MockCloudFrontClient)(nil).GetFunction), varargs...)
	return &MockCloudFrontClientGetFunctionCall{Call: call}
}

// MockCloudFrontClientGetFunctionCall wrap *gomock.Call
type MockCloudFrontClientGetFunctionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudFrontClientGetFunctionCall) Return(arg0 *cloudfront.GetFunctionOutput, arg1 error) *MockCloudFrontClientGetFunctionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudFrontClientGetFunctionCall) Do(f func(context.Context, *cloudfront.GetFunctionInput, ...func(*cloudfront.Options)) (*cloudfront.GetFunctionOutput, error)) *MockCloudFrontClientGetFunctionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudFrontClientGetFunctionCall) DoAndReturn(f func(context.Context, *cloudfront.GetFunctionInput, ...func(*cloudfront.Options)) (*cloudfront.GetFunctionOutput, error)) *MockCloudFrontClientGetFunctionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PublishFunction mocks base method.
func (m *MockCloudFrontClient) PublishFunction(ctx context.Context, params *cloudfront.PublishFunctionInput, optFns ...func(*cloudfront.Options)) (*cloudfront.PublishFunctionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishFunction", varargs...)
	ret0, _ := ret[0].(*cloudfront.PublishFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishFunction indicates an expected call of PublishFunction.
func (mr *MockCloudFrontClientMockRecorder) PublishFunction(ctx, params any, optFns ...any) *MockCloudFrontClientPublishFunctionCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishFunction", reflect.TypeOf((*MockCloudFrontClient)(nil).PublishFunction), varargs...)
	return &MockCloudFrontClientPublishFunctionCall{Call: call}
}

// MockCloudFrontClientPublishFunctionCall wrap *gomock.Call
type MockCloudFrontClientPublishFunctionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudFrontClientPublishFunctionCall) Return(arg0 *cloudfront.PublishFunctionOutput, arg1 error) *MockCloudFrontClientPublishFunctionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudFrontClientPublishFunctionCall) Do(f func(context.Context, *cloudfront.PublishFunctionInput, ...func(*cloudfront.Options)) (*cloudfront.PublishFunctionOutput, error)) *MockCloudFrontClientPublishFunctionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudFrontClientPublishFunctionCall) DoAndReturn(f func(context.Context, *cloudfront.PublishFunctionInput, ...func(*cloudfront.Options)) (*cloudfront.PublishFunctionOutput, error)) *MockCloudFrontClientPublishFunctionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateFunction mocks base method.
func (m *MockCloudFrontClient) UpdateFunction(ctx context.Context, params *cloudfront.UpdateFunctionInput, optFns ...func(*cloudfront.Options)) (*cloudfront.UpdateFunctionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFunction", varargs...)
	ret0, _ := ret[0].(*cloudfront.UpdateFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFunction indicates an expected call of UpdateFunction.
func (mr *MockCloudFrontClientMockRecorder) UpdateFunction(ctx, params any, optFns ...any) *MockCloudFrontClientUpdateFunctionCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFunction", reflect.TypeOf((*MockCloudFrontClient)(nil).UpdateFunction), varargs...)
	return &MockCloudFrontClientUpdateFunctionCall{Call: call}
}

// MockCloudFrontClientUpdateFunctionCall wrap *gomock.Call
type MockCloudFrontClientUpdateFunctionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudFrontClientUpdateFunctionCall) Return(arg0 *cloudfront.UpdateFunctionOutput, arg1 error) *MockCloudFrontClientUpdateFunctionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudFrontClientUpdateFunctionCall) Do(f func(context.Context, *cloudfront.UpdateFunctionInput, ...func(*cloudfront.Options)) (*cloudfront.UpdateFunctionOutput, error)) *MockCloudFrontClientUpdateFunctionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudFrontClientUpdateFunctionCall) DoAndReturn(f func(context.Context, *cloudfront.UpdateFunctionInput, ...func(*cloudfront.Options)) (*cloudfront.UpdateFunctionOutput, error)) *MockCloudFrontClientUpdateFunctionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
