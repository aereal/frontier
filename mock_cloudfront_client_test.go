// Code generated by MockGen. DO NOT EDIT.

package frontier_test

import (
	context "context"
	reflect "reflect"

	cloudfront "github.com/aws/aws-sdk-go-v2/service/cloudfront"
	gomock "go.uber.org/mock/gomock"
)

// MockCFForDeploy is a mock of CFForDeploy interface.
type MockCFForDeploy struct {
	ctrl     *gomock.Controller
	recorder *MockCFForDeployMockRecorder
	isgomock struct{}
}

// MockCFForDeployMockRecorder is the mock recorder for MockCFForDeploy.
type MockCFForDeployMockRecorder struct {
	mock *MockCFForDeploy
}

// NewMockCFForDeploy creates a new mock instance.
func NewMockCFForDeploy(ctrl *gomock.Controller) *MockCFForDeploy {
	mock := &MockCFForDeploy{ctrl: ctrl}
	mock.recorder = &MockCFForDeployMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCFForDeploy) EXPECT() *MockCFForDeployMockRecorder {
	return m.recorder
}

// CreateFunction mocks base method.
func (m *MockCFForDeploy) CreateFunction(ctx context.Context, params *cloudfront.CreateFunctionInput, optFns ...func(*cloudfront.Options)) (*cloudfront.CreateFunctionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFunction", varargs...)
	ret0, _ := ret[0].(*cloudfront.CreateFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFunction indicates an expected call of CreateFunction.
func (mr *MockCFForDeployMockRecorder) CreateFunction(ctx, params any, optFns ...any) *MockCFForDeployCreateFunctionCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFunction", reflect.TypeOf((*MockCFForDeploy)(nil).CreateFunction), varargs...)
	return &MockCFForDeployCreateFunctionCall{Call: call}
}

// MockCFForDeployCreateFunctionCall wrap *gomock.Call
type MockCFForDeployCreateFunctionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCFForDeployCreateFunctionCall) Return(arg0 *cloudfront.CreateFunctionOutput, arg1 error) *MockCFForDeployCreateFunctionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCFForDeployCreateFunctionCall) Do(f func(context.Context, *cloudfront.CreateFunctionInput, ...func(*cloudfront.Options)) (*cloudfront.CreateFunctionOutput, error)) *MockCFForDeployCreateFunctionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCFForDeployCreateFunctionCall) DoAndReturn(f func(context.Context, *cloudfront.CreateFunctionInput, ...func(*cloudfront.Options)) (*cloudfront.CreateFunctionOutput, error)) *MockCFForDeployCreateFunctionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFunction mocks base method.
func (m *MockCFForDeploy) GetFunction(ctx context.Context, params *cloudfront.GetFunctionInput, optFns ...func(*cloudfront.Options)) (*cloudfront.GetFunctionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFunction", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFunction indicates an expected call of GetFunction.
func (mr *MockCFForDeployMockRecorder) GetFunction(ctx, params any, optFns ...any) *MockCFForDeployGetFunctionCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFunction", reflect.TypeOf((*MockCFForDeploy)(nil).GetFunction), varargs...)
	return &MockCFForDeployGetFunctionCall{Call: call}
}

// MockCFForDeployGetFunctionCall wrap *gomock.Call
type MockCFForDeployGetFunctionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCFForDeployGetFunctionCall) Return(arg0 *cloudfront.GetFunctionOutput, arg1 error) *MockCFForDeployGetFunctionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCFForDeployGetFunctionCall) Do(f func(context.Context, *cloudfront.GetFunctionInput, ...func(*cloudfront.Options)) (*cloudfront.GetFunctionOutput, error)) *MockCFForDeployGetFunctionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCFForDeployGetFunctionCall) DoAndReturn(f func(context.Context, *cloudfront.GetFunctionInput, ...func(*cloudfront.Options)) (*cloudfront.GetFunctionOutput, error)) *MockCFForDeployGetFunctionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PublishFunction mocks base method.
func (m *MockCFForDeploy) PublishFunction(ctx context.Context, params *cloudfront.PublishFunctionInput, optFns ...func(*cloudfront.Options)) (*cloudfront.PublishFunctionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishFunction", varargs...)
	ret0, _ := ret[0].(*cloudfront.PublishFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishFunction indicates an expected call of PublishFunction.
func (mr *MockCFForDeployMockRecorder) PublishFunction(ctx, params any, optFns ...any) *MockCFForDeployPublishFunctionCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishFunction", reflect.TypeOf((*MockCFForDeploy)(nil).PublishFunction), varargs...)
	return &MockCFForDeployPublishFunctionCall{Call: call}
}

// MockCFForDeployPublishFunctionCall wrap *gomock.Call
type MockCFForDeployPublishFunctionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCFForDeployPublishFunctionCall) Return(arg0 *cloudfront.PublishFunctionOutput, arg1 error) *MockCFForDeployPublishFunctionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCFForDeployPublishFunctionCall) Do(f func(context.Context, *cloudfront.PublishFunctionInput, ...func(*cloudfront.Options)) (*cloudfront.PublishFunctionOutput, error)) *MockCFForDeployPublishFunctionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCFForDeployPublishFunctionCall) DoAndReturn(f func(context.Context, *cloudfront.PublishFunctionInput, ...func(*cloudfront.Options)) (*cloudfront.PublishFunctionOutput, error)) *MockCFForDeployPublishFunctionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateFunction mocks base method.
func (m *MockCFForDeploy) UpdateFunction(ctx context.Context, params *cloudfront.UpdateFunctionInput, optFns ...func(*cloudfront.Options)) (*cloudfront.UpdateFunctionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFunction", varargs...)
	ret0, _ := ret[0].(*cloudfront.UpdateFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFunction indicates an expected call of UpdateFunction.
func (mr *MockCFForDeployMockRecorder) UpdateFunction(ctx, params any, optFns ...any) *MockCFForDeployUpdateFunctionCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFunction", reflect.TypeOf((*MockCFForDeploy)(nil).UpdateFunction), varargs...)
	return &MockCFForDeployUpdateFunctionCall{Call: call}
}

// MockCFForDeployUpdateFunctionCall wrap *gomock.Call
type MockCFForDeployUpdateFunctionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCFForDeployUpdateFunctionCall) Return(arg0 *cloudfront.UpdateFunctionOutput, arg1 error) *MockCFForDeployUpdateFunctionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCFForDeployUpdateFunctionCall) Do(f func(context.Context, *cloudfront.UpdateFunctionInput, ...func(*cloudfront.Options)) (*cloudfront.UpdateFunctionOutput, error)) *MockCFForDeployUpdateFunctionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCFForDeployUpdateFunctionCall) DoAndReturn(f func(context.Context, *cloudfront.UpdateFunctionInput, ...func(*cloudfront.Options)) (*cloudfront.UpdateFunctionOutput, error)) *MockCFForDeployUpdateFunctionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
